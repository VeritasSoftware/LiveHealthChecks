@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using MudBlazor
@using System.Text.Json.Nodes
@using LiveHealthChecks.UI.Models
@using LiveHealthChecks.UI.Repository
@inject IMyHealthChecksRepository Repository;

@if(Api != null && Connection != null)
{     
    <div class="card" style="width: 400px;display:inline-block;">
            <div class="card-header">
                <h1 class="text-center">@Api.ApiName</h1>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-10">
                        <b>Last Health Check</b><br />
                        @if (!string.IsNullOrEmpty(@LastHealthCheck))
                        {
                            @DateTime.Now.ToLongDateString()<br />
                            @DateTime.Now.ToLongTimeString()    
                        }                    
                    </div>                   
                    <div class="col-2">
                        @if(!string.IsNullOrEmpty(LastHealthCheck))
                        {
                            @if (LastHealthCheck == "green")
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Square" Style="font-size: 3rem; background-color: green; color: green;" />
                            }
                            else 
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Square" Style="font-size: 3rem; background-color: red; color: red;" />
                            }
                        }                                            
                    </div>
                </div>
                @if(@HealthChecks.ContainsKey(Api.ReceiveMethod))
                {
                    <hr />
                    <div class="row">
                        <div class="col-12" style="text-align:center;">
                            <MudPaper Class="pa-4">
                                <MudChart 
                                        ChartType="ChartType.Pie" 
                                        InputData="@HealthChecks[Api.ReceiveMethod].ToArray()" 
                                        ChartOptions="@ChartOptions" 
                                        InputLabels="@Labels"
                                        Width="300px" 
                                        Height="300px"
                                ></MudChart>
                            </MudPaper>
                        </div>
                    </div>
                    <br /><br />
                    <div class="row">
                        <div class="col-12">
                            @{
                                var total = HealthChecksTemp.Count();
                                var totalHealthy = HealthChecksTemp.Where(hc => hc.Status == HealthStatus.Healthy).Count();
                                var totalUnhealthy = HealthChecksTemp.Where(hc => hc.Status == HealthStatus.Unhealthy).Count();
                                var healthyPercent = (totalHealthy * 100) / total;
                                var unhealthyPercent = (totalUnhealthy * 100) / total;
                            }
                            <div class="row">
                                <div class="col-6">
                                    <b>Total Health Checks</b>
                                </div>
                                <div class="col-3">
                                    @total
                                </div>
                                <div class="col-3">
                                    <br />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-6">
                                    <b>Total <span style="color:green">Healthy</span> Checks</b>
                                </div>
                                <div class="col-3">
                                    @totalHealthy
                                </div>
                                <div class="col-3">
                                    @healthyPercent %
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-6">
                                    <b>Total <span style="color:red">Unhealthy</span> Checks</b>
                                </div>
                                <div class="col-3">
                                    @totalUnhealthy
                                </div>
                                <div class="col-3">
                                    @unhealthyPercent %
                                </div>
                            </div>
                        </div>
                    </div>
                }
                @if(LastHealthChecks != null && LastHealthChecks.Any())
                {
                    <hr />
                    <b>Last 5 Health Checks</b><br />                    
                    @foreach(var hc in LastHealthChecks)
                    {
                        <br />
                        <div class="row">
                            <div class="col-10">
                                @($"{hc.ReceiveTimeStamp?.ToLongDateString()} - {hc.ReceiveTimeStamp?.ToLongTimeString()}")
                            </div>                            
                            <div class="col-2">
                                @if(hc.Status == HealthStatus.Healthy)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Square" Style="font-size: 1.5rem; background-color: green; color: green;" />
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Square" Style="font-size: 1.5rem; background-color: red; color: red;" />
                                }
                            </div>
                        </div> 
                        <div>
                            <div class="col-12">
                                <br/>
                            </div>
                        </div>
                    }
                }
            </div>
    </div>
}

@code {
    [Parameter]
    public MyApiHealthCheckModel? Api { get; set; }

    [Parameter]
    public HubConnection? Connection { get; set; }

    public int SelectedIndex = -1;

    public string[] Labels = { "Healthy", "Unhealthy" };

    public Dictionary<string, double[]> HealthChecks = new Dictionary<string, double[]>();

    public List<HealthReport> HealthChecksTemp = new List<HealthReport>();

    public List<HealthReport> LastHealthChecks = new List<HealthReport>();

    ChartOptions ChartOptions = new ChartOptions();

    private Random Random = new Random();

    private static object SyncObject = new object();

    private string? LastHealthCheck;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ChartOptions.ChartPalette = new string[] { "green", "red" };
            ChartOptions.DisableLegend = true;

            if (Api != null && Connection != null)
            {
                await RefreshAsync(Api);

                await BindApiAsync(Connection, Api);
            }
        }
        catch (Exception ex)
        {

        }        
    }

    public async Task BindApiAsync(HubConnection connection, MyApiHealthCheckModel model)
    {        
        connection.On<string>(model.ReceiveMethod, async report =>
        {
            try
            {
                dynamic jsonReport = JsonSerializer.Deserialize<JsonObject>(report);

                ////Generate random Status
                //var td = int.Parse(jsonReport["TotalDuration"].ToString().Replace(":", "").Replace(".", ""));

                //Random = new Random(td);

                //var seed = Random.Next();

                //var random = new Random(seed);
                //var num = random.Next(1, 100);

                //jsonReport["Status"] = num % 2 == 0 ? 2 : 1;

                List<HealthReport> healthChecksTemp;

                if (await Repository.ContainKeyAsync(model.ReceiveMethod))
                {
                    healthChecksTemp = await Repository.GetHealthChecksDataAsync(model.ReceiveMethod);
                }
                else
                {
                    healthChecksTemp = new List<HealthReport>() { };
                }

                var healthy = healthChecksTemp.Count(x => x.Status == HealthStatus.Healthy);
                var unHealthy = healthChecksTemp.Count(x => x.Status == HealthStatus.Unhealthy);
                double healthStatus;

                if ((int)jsonReport["Status"] == 2)
                {
                    healthy = healthy + 1;
                    healthStatus = HealthStatus.Healthy;
                    LastHealthCheck = "green";
                }
                else
                {
                    unHealthy = unHealthy + 1;
                    healthStatus = HealthStatus.Unhealthy;
                    LastHealthCheck = "red";
                }

                healthChecksTemp.Add(new HealthReport {
                    Api = model.ApiName,
                    ReceiveMethod = model.ReceiveMethod,
                    Report = report,
                    ReceiveTimeStamp = DateTime.UtcNow,
                    Status = healthStatus
                });

                healthChecksTemp.RemoveAll(x => x.Status == 0);

                var result = new double[2] { healthy, unHealthy };

                await Repository.SetHealthChecksDataAsync(model.ReceiveMethod, healthChecksTemp);

                if (HealthChecks.ContainsKey(model.ReceiveMethod))
                {
                    HealthChecks[model.ReceiveMethod] = result;
                }
                else
                {
                    HealthChecks.Add(model.ReceiveMethod, result);
                }

                HealthChecksTemp = healthChecksTemp;

                StateHasChanged();

                LastHealthChecks = healthChecksTemp.TakeLast(5).Reverse().ToList();               

                StateHasChanged();                

                await Task.CompletedTask;

            }
            catch(Exception ex)
            {

            }            
        });

        await Task.CompletedTask;
    }    

    private async Task RefreshAsync(MyApiHealthCheckModel model)
    {
        if (await Repository.ContainKeyAsync(model.ReceiveMethod))
        {
            var healthChecksTemp = await Repository.GetHealthChecksDataAsync(model.ReceiveMethod);

            var healthy = healthChecksTemp.Count(x => x.Status == HealthStatus.Healthy);
            var unHealthy = healthChecksTemp.Count(x => x.Status == HealthStatus.Unhealthy);

            var result = new double[2] { healthy, unHealthy };

            if (HealthChecks.ContainsKey(model.ReceiveMethod))
            {
                HealthChecks[model.ReceiveMethod] = result;
            }
            else
            {
                HealthChecks.Add(model.ReceiveMethod, result);
            }

            HealthChecksTemp = healthChecksTemp;

            StateHasChanged();

            LastHealthChecks = healthChecksTemp.TakeLast(5).Reverse().ToList();                      

            StateHasChanged();
        }               
    }
}
@page "/"
@using LiveHealthChecks.UI.Models
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using MudBlazor
@using System.Text.Json.Nodes
@implements IAsyncDisposable
@inject ILogger Logger
@inject HttpClient Http
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<PageTitle>LiveHealthChecks.UI</PageTitle>

<MudAppBar Color="Color.Primary" Fixed="false" Dense="true">
    <MudIconButton Title="Search" @onclick="OpenDialog" Icon="@Icons.Material.Filled.Search" Color="Color.Surface" Size="Size.Large" />
    <MudIconButton Title="Delete" @onclick="OpenDeleteDialog" Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Error" Size="Size.Large" />
    <MudIconButton Title="Connect to Server" @onclick="ConnectToServer" Icon="@Icons.Material.Filled.CastConnected" Color="Color.Surface" Size="Size.Large" />
</MudAppBar>

<div class="row">
    <div class="col-sm col-md col" style="text-align: center;">
        <MudText Typo="Typo.h2">Live Health Checks!</MudText>
    </div>
    <div class="col-sm col-md col" style="text-align: center;">
        <MudText Typo="Typo.h2"><span style="color:green">Healthy</span> vs <span style="color:red">Unhealthy</span></MudText>
    </div>
</div>

@if(DashboardSettings != null)
{
    var apis = DashboardSettings.Apis;

    @for (int i=0; i < apis.Count; i=i+2)
    {
        var api1 = apis.ElementAtOrDefault(i);
        var api2 = apis.ElementAtOrDefault(i + 1);
        var api3 = apis.ElementAtOrDefault(i + 2);
        
        @if (Connection != null)
        {
            <div class="row">
                <div class="col-sm col-md col">
                    @if (api1 != null)
                    {
                        <ApiWidget
                            Api="api1"
                            Connection="Connection"
                        ></ApiWidget>    
                    }
                </div>                
                <div class="col-sm col-md col">
                    @if (api2 != null)
                    {
                        <ApiWidget
                            Api="api2"
                            Connection="Connection"
                        ></ApiWidget>
                    }
                </div>
                <div class="col-sm col-md col">
                    @if (api3 != null)
                    {
                        <ApiWidget
                            Api="api3"
                            Connection="Connection"
                        ></ApiWidget>
                    }
                </div>
            </div>                       
        }        
    }   
}

@code {

    public int SelectedIndex = -1;

    HubConnection? Connection = null;

    private DashboardSettings? DashboardSettings;

    private void OpenDialog()
    {
        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true, 
            MaxWidth = MaxWidth.ExtraExtraLarge,
            Position = DialogPosition.Center,
            CloseButton = true
        };

        var parameters = new DialogParameters<SearchDialog>();
        parameters.Add(x => x.DashboardSettings, DashboardSettings);

        DialogService.Show<SearchDialog>("Search", parameters, options);
    }

    private async Task OpenDeleteDialog()
    {
        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = false,
            Position = DialogPosition.Center,
            CloseButton = true,            
        };
        var parameters = new DialogParameters<DeleteDialog>();
        parameters.Add(x => x.DashboardSettings, DashboardSettings);

        var dialogRef = DialogService.Show<DeleteDialog>("Delete", parameters, options);

        var result = await dialogRef.Result;

        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    private async Task ConnectToServer()
    {
        try
        {
            await DisconnectFromServer();

            Console.WriteLine("Fetching Dashboard Settings file.");

            DashboardSettings = await Http.GetFromJsonAsync<DashboardSettings>("dashboardSettings.json");        

            Console.WriteLine("Connecting to Server.");

            Connection = new HubConnectionBuilder()
                               .WithUrl(DashboardSettings.ServerUrl)
                               .WithAutomaticReconnect()
                               .Build();

            await Connection.StartAsync();

            await Connection.SendAsync("AuthenticateAsync", new MyHealthCheckAuthModel
            {
                ReceiveMethod = DashboardSettings.ServerReceiveMethod,
                SecretKey = DashboardSettings.ServerSecretKey,
                ClientId = DashboardSettings.ServerClientId
            });            

            Console.WriteLine("Connected to Server.");

            StateHasChanged();
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error connecting to Server. Message: {ex.Message}");
            Logger.LogError("Error in app.", ex);
            Connection = null;
            StateHasChanged();
        }        
    }

    private async ValueTask DisconnectFromServer()
    {
        try
        {
            if (Connection != null)
            {
                if (Connection.State == HubConnectionState.Connected)
                {
                    Console.WriteLine("Disconnecting from Server.");
                    await Connection.SendAsync("DisconnectAsync");                                           
                }

                Console.WriteLine("Disposing connection.");
                await Connection.DisposeAsync();
                Connection = null;
                StateHasChanged();
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error disconnecting from Server. Message: {ex.Message}");
            Logger.LogError("Error in app.", ex);
            Connection = null;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ConnectToServer();
    }

    public async ValueTask DisposeAsync()
    {
        await DisconnectFromServer();                        
    }
}
